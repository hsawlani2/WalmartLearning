/**
 * AUTHOR : Lennard Santos(Cloud Sherpas)
 * DESCRIPTION : Handles registration logic from SSO. This class will 
 * @State: Work In Progress
 * HISTORY : 02.MAR.2016 - Created (LSantos)
 *           03/24/2016 - shadjinoor code clean up 
 * */

//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class WalmartRegistrationHandler implements Auth.RegistrationHandler{
    class RegHandlerException extends Exception {}

    public Walmart_Open_Id__c walmartSettings = Walmart_Open_Id__c.getValues('WalmartOpenId');
    
    global boolean canCreateUser(Auth.UserData data) {
        if(String.isNotBlank(data.username)) {
            return true;
        }
        return false;
    }
    /**
     * @Description: This creates the user
     * @History: 03/2/2016 - LSantos created this method
     *           03/24/2016 - shadjinoor code clean up 
    */
    global User createUser(Id portalId, Auth.UserData data) {
        system.debug('User Data: ' + data);
        if(!canCreateUser(data)) {
            //Returning null or throwing an exception fails the SSO flow
            return null;
        }
        if(data.attributeMap.containsKey('sfdc_networkid')) {
            //We have a community id, so create a user with community access
            //@@@@@@ Highly important -- we need to redirect them to an error page if there is no account exists
            //check if the user is already available in the system
            try{
                List<String> parts = data.username.split('\\\\');
                String strippedFedId = parts[parts.size()-1];

                System.debug('Fed Id to search for: ' + strippedFedId); 
                List<User> users = [SELECT Id FROM User WHERE UUID__c = :data.identifier OR  FederationIdentifier =:strippedFedId]; //For merchants, the login id should match the federation id since it is an AD login
                if(users.size() >= 1){
                    return users[0];
                }else{
                    String profileName;
                    String partnerType = data.attributeMap.get('partnerType');
                    Account[] a;
                    if(partnerType =='INTERNAL') //You should never come here because internal users should be provisioned already and never be auto-created using this process
                    {
                        throw new RegHandlerException('Internal users need to be configured for LDAP login. For help, contact your administrator to setup your Federation Identifier.');
                    }
                    else if(partnerType=='SELLER')
                    {
                        profileName = walmartSettings.Profile_Name__c;
                        //a = retrieveSellerAccount(data);
                        String mprecordType='MP_Account';
                        a = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Seller_ID__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:mprecordType]; 
                        
                    }
                    else
                    {
                        profileName = walmartSettings.Supplier_Profile_Name__c;
                        //a = retrieveSupplierAccount(data, partnerType);
                         String recordType='X1P_Account';
                         Account[] accounts;
                         if(partnerType=='DSV')
                            a = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Partner_PK_DSV__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:recordType]; 
                         else
                            a = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Partnership_PK_Owned__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:recordType];
           
                    }

                    System.debug('Account : ' + a);
                    System.debug('Contact : ' + a[0].Contacts);
                    String aAndC = JSON.serialize(a[0]);
                    Map<String, Object> aCMap = (Map<String, Object>) JSON.deserializeUntyped(aAndC);
                    
                    ID contactId = (aCMap.containsKey('Contacts'))?a[0].Contacts[0].id:createSellerContact(data, a[0].id);
                    System.debug('contactId : ' + contactId);
                    
                    User u = new User();
                    Profile p = [SELECT Id FROM profile WHERE name=: profileName];
                    u.username = data.identifier + '@walmart.com'; // we have done this to accomadate unique user id for Walmart only
                    u.email = data.email;
                    u.lastName = data.lastName;
                    u.firstName = data.firstName;
                    String alias = data.username;
                    //Alias must be 8 characters or less
                    if(alias.length() > 8){
                        alias = alias.substring(0, 8);
                    }
                    u.alias = alias;
                    u.languagelocalekey = UserInfo.getLocale();
                    u.localesidkey = UserInfo.getLocale();
                    u.emailEncodingKey = 'UTF-8';
                    u.timeZoneSidKey = 'America/Los_Angeles';
                    u.profileId = p.Id;
                    u.contactId = contactId;
                    u.UUID__c = data.identifier;
                    System.debug('User before : ' + u);
                    Database.SaveResult dr = database.insert(u);
                    System.debug('User insert results : ' + dr);
                    System.debug('User after : ' + u);
                    return u;
                }
            }
            catch(Exception e){
             System.debug('is it coming here: ' + e.getStackTraceString());
                //do nothing
            }
        }
        System.debug('before returning from createUser: ' );
        return null;
       
    }

    global void updateUser(Id userId, Id portalId, Auth.UserData data){
        //Not in current scoope, but putting the code for scalability (if Walmart want this in the future)
        
        /*User u = new User(id=userId);
        //TODO: Customize the username. Must be 80 characters or less.
        //u.username = data.username + '@myorg.com';
        u.email = data.email;
        u.lastName = data.lastName;
        u.firstName = data.firstName;
        //String alias = data.username;
        //Alias must be 8 characters or less
        //if(alias.length() > 8) {
            //alias = alias.substring(0, 8);
        //}
        //u.alias = alias;
        update(u);*/
    }
    
    /**
     * @Description: This method will create contact is one already not exists.
     * @History: 03/30/2016 - Srini created this method
    */
     public Id createSellerContact(Auth.UserData data, Id accountId){
        Contact c = new Contact();
        c.accountId = accountId;
        c.email = data.email;
        c.firstName = data.firstName;
        c.lastName = data.lastName;
        c.Contact_UUID__c = data.attributeMap.get('uuid');
        insert(c);
        return c.Id;
    }

    private Account[] retrieveSellerAccount(Auth.UserData data)
    {
           String mprecordType='MP_Account';
           Account[] accounts = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Seller_ID__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:mprecordType]; 
           return accounts;
    }

    private Account[] retrieveSupplierAccount(Auth.UserData data, String partnerType)
    {
           String recordType='X1P_Account';
           Account[] accounts;
           if(partnerType=='DSV')
                accounts = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Partner_PK_DSV__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:recordType]; 
           else
                accounts = [SELECT Name, (SELECT Id FROM Contacts WHERE email = :data.email AND firstName = :data.firstName AND lastName = :data.lastName) FROM account WHERE Partnership_PK_Owned__c = :data.attributeMap.get('orgId') AND RecordType.DeveloperName=:recordType];
           return accounts;
    }

}