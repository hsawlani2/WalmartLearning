<apex:component layout="none"> 

<apex:attribute name="qCon" type="QuestionnaireController" required="true" description="handle to QuestionnaireController" />

    <style type="text/css">
        .error-msg, .error-marketplace, .error-country, .error-category, .error-page2c, .error-page4, .error-sp, .page_1_error {
           color: #FF0000;
        }
        
    </style>
    
    <script>
    
        $(function() {
            
            // Show form
            var basicForm = $(".steps-basic").show();
            $(".steps-basic").steps({
                headerTag: "h6",
                bodyTag: "fieldset",
                transitionEffect: "none",
                titleTemplate: '<span class="number">#index#</span> #title#',
                autoFocus: true,
                labels: {
                    finish: 'Submit'
                },
                onInit: function (event, currentIndex) { 
                    updateControlButtons()
                },
                // Disable validation for now
                onStepChanging: function (event, currentIndex, newIndex) {
                    // Always allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }
        
                    // Needed in some cases if the user went back (clean up)
                    if (currentIndex < newIndex) {
        
                        // To remove error styles
                        basicForm.find(".body:eq(" + newIndex + ") label.error").remove();
                        basicForm.find(".body:eq(" + newIndex + ") .error").removeClass("error");
                    }
                    
                    if (currentIndex == 0) {
                        
                        if ($('.page_1_error').length > 0) {
                            $('.page_1_error').remove();
                        }
                        
                        // state must not be empty if country is US
                        var countrySelected = $('select[id*=country]').val();
                        if (countrySelected === 'United States') {
                          /*  var hasError = false;
                            if ($.trim($('select[id*=state_inc]').val()) === "") {
                                hasError = true;
                            }
                            if ($.trim($('select[id*=state_province]').val()) === "") {
                                hasError = true;
                            }
                            if (hasError) {
                                if ($('.page_1_error').length == 0) {
                                    var errorPlace = $(".page_1_errors");
                                    errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspState is required.</span>")
                                }
                                return false;
                            }
                            */
                            if ($.trim($('select[id$=state_inc]').val()) === "") {
                                if($('.page_1_error').length == 0) {
                                 var errorPlace = $(".page_1_errors");
                                 errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [State of Incorporation]</span>")
                                }
                                return false;
                            }
                            
                            if ($.trim($('select[id$=state_province]').val()) === "") {
                                if($('.page_1_error').length == 0) {
                                 var errorPlace = $(".page_1_errors");
                                 errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [State/Province/Region]</span>")
                                }
                                return false;
                            }
                            
                        }
                        
                        if ($.trim($('select[id$=permissiontotext]').val()) === "") {
                                if($('.page_1_error').length == 0) {
                                 var errorPlace = $(".page_1_errors");
                                 errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [Do you give us the permission to text you for special notifications if needed?]</span>")
                                }
                                return false;
                            }
                            
                            if ($.trim($('select[id$=existingsupplier]').val()) === "") {
                                if($('.page_1_error').length == 0) {
                                 var errorPlace = $(".page_1_errors");
                                 errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [Are you an existing supplier to Walmart?]</span>")
                                }
                                return false;
                            }
                            
                            if ($.trim($('select[id$=marketPlace]').val()) === "") {
                                if($('.page_1_error').length == 0) {
                                 var errorPlace = $(".page_1_errors");
                                 errorPlace.append("<span class='page_1_error' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [How did you hear about Walmart Marketplace?]</span>")
                                }
                                return false;
                            }
                        
                    }
                    
                    if (currentIndex == 2) {
                        
                       var isExpSelect = $('select[id*=experience-select]').val();
                       var isMarketplaceSelect = $('select[id*=marketplace-select]').val();
                       
                       collectSelectedMarketplaces();
                       
                        if (isExpSelect === 'Yes' && !isMarketplaceSelect){
                            if($('.error-marketplace').length == 0) {
                                var formBody = $("#experience-errorplace"); //get element by ID
                                formBody.append("<span class='error-marketplace' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspThis field is required.</span>"); //append information to #name
                            }
                            return false;
                        }
                    }
                    
                    if (currentIndex == 1) {
                        if($('.error-page2c').length > 0) {
                            $('.error-page2c').remove();
                        }
                        if (newIndex > currentIndex && !isPage2cValid()) {
                            if($('.error-page2c').length == 0) {
                                var formBody = $('#page2c-errorplace'); //get element by ID
                                console.log('error div: ' + formBody)
                                formBody.append("<span class='error-page2c' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspThe sum of % Owned and % Drop Ship should be 100.</span>"); //append information to #name
                            }
                            return false;
                        }
                       
                    }
                    
                    console.log('main current index ' + currentIndex + ' newindex ' + newIndex)

                    $("[id$=app_form]").validate().settings.ignore = ":disabled,:hidden";
                    return $("[id$=app_form]").valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex) {
                    updateControlButtons()
                },
                onFinishing: function (event, currentIndex)
                {
                    if (!checkPreferredIntegration()) {
                        return false;
                    }
                    else if(getTotalOrderPct() > 100){
                        if($('.error-page4').length > 0) {
                            $('.error-page4').remove();
                        }
                        if($('.error-page4').length == 0) {
                            var formBody = $('#page4-errorplace'); //get element by ID
                            formBody.append("<span class='error-page4' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspTotal % of Orders Shipped should not be more than 100</span>"); 
                        }
                        return false;
                      
                    }
                    if ($.trim($('select[id$=fulfillmentbyamazon]').val()) === "") {
                        if($('.error-page4').length == 0) {
                         var errorPlace = $('#page4-errorplace');
                         errorPlace.append("<span class='error-page4' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspRequired field missing [Are you currently using Fulfillment by Amazon (FBA) to fulfill your online orders?]</span>")
                        }
                        return false;
                    }
                                        
                    $("[id$=app_form]").validate().settings.ignore = ":disabled,:hidden";
                    return $("[id$=app_form]").valid();
                },
                onFinished: function (event, currentIndex) {
                    console.log('completing app');
                    collectAndSaveForm()
                }
                
            });
            
            var subForm = $(".embedded_wizard").show();
            $(".embedded_wizard").steps({
                headerTag: "h6",
                bodyTag: "fieldset",
                transitionEffect: "none",
                titleTemplate: '<span class="number">#index#</span> #title#',
                autoFocus: true,
                labels: {
                    finish: 'Submit'
                },
                onStepChanging: function (event, currentIndex, newIndex) {
                    if($('.error-page2c').length > 0) {
                        $('.error-page2c').remove();
                    }
                    if (currentIndex == 0) {
                        var specCatvalue = $('[id$=specificCategory]').val();
                        var isOn = $(".categoriesCheckField input[id='checkbox-{!qCon.otherCategoryId}']").is(':checked');
                        console.log('isOn ---- :  ' + isOn);
                        
                        if($('.error-sp').length > 0) {
                           $('.error-sp').remove();
                        }
                       
                        if (isCategoriesCheckFieldEmpty()){
                            if($('.error-msg').length == 0) {
                                 var formBody = $(".categoriesCheckField"); //get element by ID
                                formBody.prepend("<span class='error-msg' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspPlease select at least one category</span>"); //append information to #name
                            }
                            return false;
                        }else if(!specCatvalue && isOn){
                            if($('.error-sp').length == 0) {
                                var formBody = $(".spError"); 
                                formBody.prepend("<span class='error-sp' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspSpecific Category field is required.</span>"); //append information to #name
                            }
                            return false;
                        }else{
                            compileAndSaveCategories();
                        }
                    }
                    
                    if (currentIndex == 1 && newIndex > 0) {
                        if($('.error-category').length > 0) {
                            $('.error-category').remove();
                        }
                        if (isCategoryTableFieldsEmpty()){
                             if($('.error-category').length == 0) {
                                var tableFieldsEmpty = $("#category-errorplacement"); //get element by ID
                                tableFieldsEmpty.append("<span class='error-category' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspAll fields are required.</span>"); //append information to #name
                              }
                            return false;
                        } 
                        else if (getTotalCategoryPct() != 100) {
                            if($('.error-category').length == 0) {
                                var hasNonNumericValue = $("#category-errorplacement"); //get element by ID
                                hasNonNumericValue.append("<span class='error-category' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspTotal % of Annual Sales should be 100</span>"); //append information to #name
                            }
                            return false;
                        }
                        if (compareSKUtoSKUMarketplace()) {
                            if($('.error-category').length == 0) {
                                var compareSKUValue = $("#category-errorplacement"); //get element by ID
                                compareSKUValue.append("<span class='error-category' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspNumber of SKUs to be sold in Walmart should not be more than Number of SKUs</span>"); //append information to #name
                            }
                            return false;
                        }
                    }
                    
                    console.log('sub current index ' + currentIndex + ' newindex ' + newIndex)
                    
                    collectSelectedCategories()
                    return $("[id$=app_form]").valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex) {
                    updateControlButtons()
                },
                onFinished: function (event, currentIndex) {
                    alert("Form submitted.");
                }
                
            });
            
            
            // Validation functions
            // Initialize validation
            $("[id$=app_form]").validate({
            // $(".steps-basic").validate({
                ignore: 'input[type=hidden], .select2-input',
                errorClass: 'validation-error-label',
                successClass: 'validation-valid-label',
                highlight: function(element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                unhighlight: function(element, errorClass) {
                    $(element).removeClass(errorClass);
                },
                errorPlacement: function(error, element) {
                    if (element.parents('div').hasClass("checker") || element.parents('div').hasClass("choice") || element.parent().hasClass('bootstrap-switch-container') ) {
                        if(element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                            error.appendTo( element.parent().parent().parent().parent() );
                        }
                         else {
                            error.appendTo( element.parent().parent().parent().parent().parent() );
                        }
                    }
                    else if (element.parents('div').hasClass('checkbox') || element.parents('div').hasClass('radio')) {
                        error.appendTo( element.parent().parent().parent() );
                    }
                    else if (element.parents('label').hasClass('checkbox-inline') || element.parents('label').hasClass('radio-inline')) {
                        error.appendTo( element.parent().parent() );
                    }
                    else if (element.parent().hasClass('uploader') || element.parents().hasClass('input-group')) {
                        error.appendTo( element.parent().parent() );
                    }
                    else {
                        error.insertAfter(element);
                    }
                },
                
                // rules: {
                //     '[name$=email]': {
                //         email: true
                //     }
                // }
            });
            
            //------ Seller Questionnaire Page 1 ------
            
            $.validator.addMethod(
                "money", 
                function(value, element) {
                    //var isValidMoney = /^((\d{1,3}\,)*\d{3}|\d{1,3})\.\d{2}$|^((\d{1,3}\.)*\d{3}|\d{1,3})\,\d{2}$/.test(value);                    
                    
                    //Ashok start
                    /*
                    var isValidMoney = /^\\$((\d{1,3}\,)*\d{3}|\d{1,3})\.\d{2}$|^((\d{1,3}\.)*\d{3}|\d{1,3})\,\d{2}$/.test(value);
                    */
                    //var isValidMoney = /^\\$((\d{1,3}\,)*\d{3}|\d{1,3})(\.(\d){1,})*$/.test(value);
                    var isValidMoney = /^\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$/.test(value);
                    //Ashok End
                    
                    return this.optional(element) || isValidMoney;
                }, 
                "Please specify a valid amount. You must use this format: $000,000.00"
            );
            
            $.validator.addMethod(
                "percentageValue", 
                function(value, element) {
                    var isValidPercentage = /^(\d{0,2}(\.\d{0,2})?|100(\.00?)?)$/.test(value);
                    return this.optional(element) || isValidPercentage;
                }, 
                "Please specify a valid percentage value. You must use this format XX.XX"
            );
            
            $.validator.addMethod(
                "newemail",
                function(value, element) {
                    var isValidEmail = /^(([a-zA-Z]|[0-9])|([-]|[_]|[.]))+[@](([a-zA-Z0-9])|([-])){2,63}[.](([a-zA-Z0-9]){2,63})+$/.test(value);
                    return this.optional(element) || isValidEmail;
                },          
                "Please check your input. You must use this format: XXX@XXX.XXX"
            );
                                        
            $.validator.addMethod(
                "regex",
                function(value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },          
                "Please check your input. You must use this format: XX-XXXXXXX"
            );
            
            $.validator.addMethod(
                "compWebsite",
                function(value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },          
                "Please check your input. You must enter correct URL"
            );
                        
            $.validator.addMethod(
                "mobilenumber",
                function(value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },          
                "Please check your input. You must use this format: (999) 999-9999"
            );
                        
            $.validator.addMethod(
                "notFuture",
                function(value, element) {
                    return parseInt(value) <= parseInt(new Date().getFullYear())
                },
                "Should be on or before the current year."
            );

            $.validator.addMethod(
                    "validFirstName", 
                    function(value, element) {
                        var isValidFirstName = /^[^<>;]*$/.test(value);
                        return this.optional(element) || isValidFirstName;
                    }, 
                    "First Name should not contain the following characters: \">\", \"<\", \";\" "
                );
                $.validator.addMethod(
                    "validLastName", 
                    function(value, element) {
                        var isValidLastName = /^[^<>;]*$/.test(value);
                        return this.optional(element) || isValidLastName;
                    }, 
                    "Last Name should not contain the following characters: \">\", \"<\", \";\" "
                );
                $.validator.addMethod(
                    "validAddressLine1", 
                    function(value, element) {
                        var isValidAddressLine1 = /^[^<>;]*$/.test(value);
                        return this.optional(element) || isValidAddressLine1;
                    }, 
                    "Address Line 1 should not contain the following characters: \">\", \"<\", \";\" "
                );

                $.validator.addMethod(
                    "validAddressLine2", 
                    function(value, element) {
                        var isValidAddressLine2 = /^[^<>;]*$/.test(value);
                        return this.optional(element) || isValidAddressLine2;
                    }, 
                    "Address Line 2 should not contain the following characters: \">\", \"<\", \";\" "
                );
                $.validator.addMethod(
                    "validCompanyName", 
                    function(value, element) {
                        var isValidCompanyName = /^[^<>;]*$/.test(value);
                        return this.optional(element) || isValidCompanyName;
                    }, 
                    "Company Name should not contain the following characters: \">\", \"<\", \";\" "
                ); 

                $.validator.addMethod(
                "compareWithemail", 
                function(value, element,otherEmail) {
                 return value != otherEmail ? true:false;
                },
                "Please use a different new Email than the current primary Email."
                );
               
                $('[id$=first_name]').rules("add",{
                    required: true,
                    validFirstName: true,
                    maxlength:25
                });
                $('[id$=last_name]').rules("add",{
                    required: true,
                    validLastName: true,
                    maxlength:25
                });
                $('[id$=legalAddressLine1]').rules("add",{
                    required: true,
                    validAddressLine1: true,
                    maxlength:50
                });             

                $('[id$=legalAddressLine2]').rules("add",{
                    required: false,
                    validAddressLine2: true,
                    maxlength:50
                });

                $('[id$=compName]').rules("add",{
                    required: true,
                    validCompanyName: true,
                    maxlength:50 
                }); 

            $('[id$=compWebsite]').rules("add",{
                compWebsite:/^((http|https):\/\/)[-a-zA-Z0-9:%_\+~#=]{1,256}[-a-zA-Z0-9:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9:%_\+.~#?&\/\/=]*)|^(www\.)[-a-zA-Z0-9:%_\+~#=]{2,256}[-a-zA-Z0-9:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9:%_\+.~#?&\/\/=]*)|^([-a-zA-Z0-9:%_\+~#=]{2,256}[-a-zA-Z0-9:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9:%_\+.~#?&\/\/=]*))/
            });
            
            $('[id$=taxID]').rules("add",{
                required: true,
                //regex: /^[a-zA-Z0-9]{2}-[a-zA-Z0-9]{5}$/
                regex: /^[a-zA-Z0-9]{2}-[a-zA-Z0-9]{7}$/
            });
            
            $('[id$=yearFounded]').rules("add",{
                required: true,
                number: true,
                notFuture: true
            });
            
            
            $('[id$=phoneNumber]').rules("add",{
                required: true,
                // LQ: Lets disable this rule for now.
                // number: true
            });
            
            $('[id$=mobilenumber]').rules("add",{
                required: true,
                maxlength:14,
                // number: true
                mobilenumber: /^\(\d{3}\)\s\d{3}-\d{4}$/
            });
            
            $('[id$=extensionNumber]').rules("add",{
                // number: true
            });
            
            $('[id$=existingsupplier]').rules("add",{
                required: true
            });

            $('[id$=email]').rules("add",{
                required: true,
                email: true
            });
            
            $('[id$=newemail]').rules("add",{
                required: true,
                // email: true,
                newemail:true,
                compareWithemail:$('[id$=email]').val() 
            });
            
            
            $('[id$=ytdTotalSalesRevenue]').rules("add",{
                required: true,
                money:true,
                compareWithValue:true
            });
            
            $('[id$=ytdSalesRevenue]').rules("add",{
                required: true,
                // LQ: Lets disable this for now.
                 money:true,
                 compareWithTotal:true
            });
            
            $.validator.addMethod(
                "compareWithValue", 
                function(value, element) {
                    var revenueValue = Number($('[id$=ytdSalesRevenue]').val().replace('$','').replace(/,/g,''));
                    console.log('value'+'-->' + value);
                    console.log('revenueValue'+'-->' + revenueValue);
                    return Number(value.replace('$','').replace(/,/g,'')) >= revenueValue ? true:false;
                },
                "Should be greater or equal to last 12 months online sales revenue."
            );
            
            $.validator.addMethod(
                "compareWithTotal", 
                function(value, element) {
                    var totalValue = Number($('[id$=ytdTotalSalesRevenue]').val().replace('$','').replace(/,/g,''));
                    console.log('totalValue'+'-->' + totalValue);
                    console.log('value'+'-->' + value);
                    return Number(value.replace('$','').replace(/,/g,'')) <= totalValue ? true:false;
                },
                "Should be less or equal to last 12 months total sales revenue."
            );
            
            
            
            
            //$('[id$=additionalComments]').rules("add",{
            //    required: function(element){
            //    var source = $('select[title=how-did-you-hear]').val();
            //      if (source === 'Other' || source === 'Channel Partner' || source === 'Referral') {
            //            return true;
            //    }else{
            //        return false;   
            //    }
            //   }
            //});
            
            //------ Seller Questionnaire Page 2 ------
            
           //  $('[id$=specificCategory]').rules("add",{
           //    required: function(element){
           //      if ($(".categoriesCheckField input[name='Other']").is(':checked')) {
           //         return true;
           //     }else{
           //         return false;   
           //     }
           //     return false;
           //  } 
           //});
            
            // $('[id$=marketPlace]').on('change', function() {
            //     var xz = $('[id$=marketPlace]').val();
            //      console.log('marketPlace: ' + xz)
            //     $('[id$=additionalComments]').valid(); 
            // });
            
            /*
            $('[id$=percentageOwned]').rules("add",{
                required: true,
                number: true
            });
            
            $('[id$=percentageDropShip]').rules("add",{
                required: true,
                number: true
            });
            
             $('[id$=assortmentVariantItems]').rules("add",{
                required: true,
                number: true,
                percentageValue: true
            });
            */

            $('[id$=assortmentmanufacturedItems]').rules("add",{
                required: true,
                number: true,
                percentageValue: true
            });
             
            //------ Seller Questionnaire Page 3 ------
    
        //     $('select[title=top-three-marketplaces]').rules("add",{
        //        required: function(element){
        //        var source = $('select[id*=experience-select]').val();
        //          if (source === 'No' ) {
        //                return false;
        //        }else{
        //            return true;   
        //        }
        //     }
        //    });

            $('[id$=marketPlace]').rules("add",{
                required: true
            });
    
            $('[id$=active-listings]').rules("add",{
                //required: true,
                number: true,
                percentageValue: true
            });
            
            
            $('[id$=first-two-pages]').rules("add",{
                //required: true,
                number: true,
                percentageValue: true
            });
            
            $('[id$=expOtherName]').rules("add",{
                required: true
            });
            
            $('[id$=amazonURL]').rules("add",{
                url: true,
                required: true
            });
            
            $('[id$=ebayURL]').rules("add",{
                url: true,
                required: true
            });
            
            $('[id$=otherURL]').rules("add",{
                url: true,
                required: true
            });
            
            $('[id$=amazonPercentageRating]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            
             $('[id$=ebayPercentageRating]').rules("add",{
                number: true,
                percentageValue: true
            });
            
             $('[id$=otherPercentageRating]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            //------ Seller Questionnaire Page 4 ------
            
            // $('[id$=thirdPartyIntegration]').rules("add",{
            //     required: true
            // });
            
            $('[id$=percentageFreeShipping]').rules("add",{
                required: function(element){
                  var source = $('select[id*=freeShippingSelect]').val();
                  if (source === 'No' ) {
                      return false;
                  }else{
                      return true;   
                  }
               },
                number: true,
                percentageValue: true
            });
            
            
             $('[id$=businessDays]').rules("add",{
                required: true,
                number: true
            });
            
             $('[id$=cancellationRate]').rules("add",{
                required: true,
                number: true,
                percentageValue: true
            });
            
            $('[id$=ordersFallOutside]').rules("add",{
                required: true,
                number: true,
                percentageValue: true
            });
            
             $('[id$=ordersRefunded]').rules("add",{
                required: true,
                number: true,
                percentageValue: true
            });
             
            $('[id$=percentageAmazon]').rules("add",{
                number: true,
                percentageValue: true
            });

            
             $('[id$=customerReturnPolicy]').rules("add",{
                required: true
            });
            
            $('[id$=fulfillmentPercentage1]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            $('[id$=fulfillmentPercentage2]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            $('[id$=fulfillmentPercentage3]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            $('[id$=fulfillmentPercentage4]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            $('[id$=fulfillmentPercentage5]').rules("add",{
                number: true,
                percentageValue: true
            });
            
            
            // apply onlick behavior
            $("#nextBtn").click(function() {
                var mainWizard = $(".steps-basic")
                var subWizard = $(".embedded_wizard")
                var mainIndex = mainWizard.steps("getCurrentIndex")
                var subIndex = subWizard.steps("getCurrentIndex")
                if (mainIndex == 1 && subIndex < 2) {
                    subWizard.steps("next")
                }
                else if (mainIndex < 3) {
                    mainWizard.steps("next")
                }
            });
            
            $("#prevBtn").click(function() {
                var mainWizard = $(".steps-basic")
                var subWizard = $(".embedded_wizard")
                var mainIndex = mainWizard.steps("getCurrentIndex")
                var subIndex = subWizard.steps("getCurrentIndex")
                if (mainIndex == 1 && subIndex > 0) {
                    subWizard.steps("previous")
                }
                else if (mainIndex > 0) {
                    mainWizard.steps("previous")
                }
            });
            
            $("#finishBtn").click(function() {
                var mainWizard = $(".steps-basic")
                mainWizard.steps("finish")
            });
            
            // mask money
            $('.currency').maskMoney({ prefix:'$',thousands:',',  allowZero:true });
            
            $('.currencyNoDecimal').maskMoney({ prefix:'$', precision:'0', thousands:',',  allowZero:true });
            
            $('.numberInputNoComma').maskMoney( { precision:'0', thousands:'', allowZero:true })
            
            $('.numberInput').maskMoney( { precision:'0', allowZero:true })
            
            // hide OOB navigation
            $(".actions").hide();
            
            // Initialize plugins
            // ------------------------------
        
            // Select2 selects
            $('.select').select2();
            
            // Fixed width
            $('.select-fixed').select2({
                minimumResultsForSearch: "-1",
                width: 250
            });
        
            // Simple select without search
            $('.select-simple').select2({
                minimumResultsForSearch: '-1'
            });
        
            // Styled checkboxes and radios
            $('.styled').uniform({
                radioClass: 'choice'
            });
        
            // Styled file input
            $('.file-styled').uniform({
                wrapperClass: 'bg-warning',
                fileButtonHtml: '<i class="icon-googleplus5"></i>'
            });
            
            $('[data-toggle="tooltip"]').tooltip()
            
            $('.tags-input').tagsinput();
            
            $('input[id$=attachments]').fileinput({
                showPreview: false,
                showUpload: false,
                maxFileSize: 10000, // 10 MB,
                browseIcon: '<i class="icon-plus22"></i> ',
                removeIcon: '<i class="icon-cancel-square"></i> ',
                browseLabel: '',
                browseClass: 'btn btn-primary btn-icon',
                removeLabel: '',
                browseIcon: '<i class="icon-plus22"></i> ',
                removeClass: 'btn btn-danger btn-icon',
                removeIcon: '<i class="icon-cancel-square"></i> ',
                layoutTemplates: {
                    caption: '<div tabindex="-1" class="form-control file-caption {class}">\n' + '<span class="icon-file-plus kv-caption-icon"></span><div class="file-caption-name"></div>\n' + '</div>'
                },
                initialCaption: "No file selected",
                mainClass: 'input-group-sm'
            })
            
            
            var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

            // Defining observer 
            if (MutationObserver != null && typeof MutationObserver !== "undefined") {
                var observer = new MutationObserver(function(mutations) { 
                    // If the myListClass was removed from the list - re-assign it
                    $('.dependent-picklist select').each(function() {
                        reLabelNoneOption();
                        $this = $(this)
                        if (!$this.hasClass('select')) {
                            $this.addClass('select')
                            $this.select2()
                            $this.change(function () {
                                $this = $(this)
                                if ($this.find('option:selected').first().text() == 'Other') {
                                    $(".integration-choices").show()
                                }
                                else {
                                    $(".integration-choices").hide()
                                }
                            })
                            .change();
                        }
                    })
                });
                
                var observerAttributes = { childList: true, subtree: true, attributes: true }
                // A target object fot the observer
                var integrationsNode = document.querySelector('#integrationsNode'); 
                var countryNode = document.querySelector('#countryNode'); 
                
                // Assigning observer to the dependent picklist
                observer.observe(integrationsNode, observerAttributes);
                observer.observe(countryNode, observerAttributes);
            }
            
        });
        
            function isCategoriesCheckFieldEmpty() {
                var selected = $(".categoriesCheckField input:checked").map(function(i,el){return el.name;}).get();
                if(selected.length > 0){
                    return false;
                }else{
                    return true;
                }
            }
    
        
        function updateControlButtons() {
            var mainWizard = $(".steps-basic")
            
            // configure finish button visibility 
            if (mainWizard.steps("getCurrentIndex") == 3) {
                $("#nextBtn").hide()
                $("#finishBtn").show()
            }
            else {
                $("#nextBtn").show()
                $("#finishBtn").hide()
            }
            
            // configure previous button visibility
            if (mainWizard.steps("getCurrentIndex") == 0) {
                $("#prevBtn").hide()
            }
            else {
                $("#prevBtn").show()
            }
        }
        
        
        function enableOtherCategoryName() {
            var isOn = $(".categoriesCheckField input[id='checkbox-{!qCon.otherCategoryId}']").is(':checked')
        //    var specificCategory = $(".specific-category").prop("disabled", !isOn)
            $(".specific-category").prop({ disabled: !isOn });
                    
            if (isOn) {
                // do validation to make sure "other" field is filled out
                $('[id$=specificCategory]').valid(); 
            }
            else {
                // dont do anything but
                // we can also remove the error message if theres any
            }
            
            checkedCategorySelected();
   
        }
        
         function checkedCategorySelected() {
             
            var checkboxGrpValues = [];
            $('.categoriesCheckField input[type="checkbox"]:checked').each(function(index, elem) {
                checkboxGrpValues.push($(elem).val());
            });
            
            console.log("checkboxGrpValues: " + checkboxGrpValues.length);
            
            if (checkboxGrpValues.length > 0) {
                 if($('.error-msg').length > 0) {
                      $('.error-msg').remove();
                 }
            }
             
         }
         
         function percentOwnedUpdated() {
             var value = $('input[id*=percentageOwned]').val()
             if ($.isNumeric(value)) {
                 value = parseFloat(value)
                 if (value <= 100) {
                     $('input[id*=percentageDropShip]').val(100 - value)
                 }
             }
         }
         
         function percentDropShipUpdated() {
             var value = $('input[id*=percentageDropShip]').val()
             if ($.isNumeric(value)) {
                 value = parseFloat(value)
                 if (value <= 100) {
                     $('input[id*=percentageOwned]').val(100 - value)
                 }
             }
         }
         
         function isPage2cValid() {
             /*var owned = $('input[id*=percentageOwned]').val()
             var drop = $('input[id*=percentageDropShip]').val()
             return $.isNumeric(owned) && $.isNumeric(drop) && (parseFloat(owned) + parseFloat(drop) == 100)
             */
             return true;
         }
        
        // page 3
        // toggle the section in page 3 when select input changes
        function refreshMarketplaceExpTable() {
            refreshMarketplaceBody()
            
            var isAmazonSelected = false
            
            var selectedMarketplaces = $('select[id*=marketplace-select]').val() 
            console.log("selected marketplaces: " + selectedMarketplaces)
            if (!selectedMarketplaces) {
                $("#experience-table-div").hide()
                console.log("no marketplace selected")
                 
            }
            else {
                $('.error-marketplace').remove();
                $("#experience-table-div").show()
                
                $("#experience-table > tbody > tr").each(function() {
                    $this = $(this)
                    if ($.inArray($this.attr("title"), selectedMarketplaces) != -1) {
                        $this.show()
                    }
                    else {
                        $this.hide()
                    }
                });
                
                isAmazonSelected = $.inArray('Amazon', selectedMarketplaces) != -1
                
                // also toggle questions
            }
            refreshAmazonQuestions(isAmazonSelected)
        }
        
        function refreshMarketplaceBody() {
            var expBody = $("#experience-body")
            // gets the selected option 
            if ($('select[id*=experience-select]').val() === 'Yes') {
                expBody.show()
            }
            else {
                expBody.hide()
            }
        }
        
        function refreshAmazonQuestions(isAmazonSelected) {
            var questionsBody = $('#amazon-questions')
            if (isAmazonSelected) {
                questionsBody.show()
            }
            else {
                questionsBody.hide()
            }
        }
        
        // page 4
        function updateIntegrationOptions() {
            if ($("input[name='Using a Third Party API']").is(':checked')) {
                $(".integration-choices").show()
            }
            else {
                $(".integration-choices").hide()
            }
        }
        
        function updateFulfillmentVisiblity() {
            if ($('select[id=fulfillment-options]').val() === 'Y') {
                $(".fulfillment-providers").show()    
            }
            else {
                $(".fulfillment-providers").hide() 
            }
        }
        
        
        // TODO: hide plus button when all rows are shown
        function addFulfillmentRow() {
            for (i = 2; i <= 5; i++) {
                if (!$("tr[title=fulfillment-"+i+"]").is(':visible')) {
                    $("tr[title=fulfillment-"+i+"]").show()
                    updateAddRowButtonVisibility()
                    return
                }
            }
        }
        
        function updateAddRowButtonVisibility() {
            var rowCount = $('.fulfillment-providers tr:visible').length;
            if (rowCount == 6) { // 5 rows plus header
                $(".fulfillment-add-row").hide()
            }
            else {
                $(".fulfillment-add-row").show()
            }
        }
        
        function subtractFulfillmentRow(rowIndex) {
            $("tr[title=fulfillment-"+rowIndex+"]").hide()
            updateAddRowButtonVisibility()
        }
        
        function checkPreferredIntegration() {
            
            var inputMissing = false;
            
            $('#integrationsNode select').each(function() {
                $this = $(this);
                if ($this.val() === '') {
                    inputMissing = true;
                }
            });
            
            if($('.error-page4').length > 0) {
                $('.error-page4').remove();
            }
            if (inputMissing) {
                if($('.error-page4').length == 0) {
                    var formBody = $('#page4-errorplace'); //get element by ID
                    formBody.append("<span class='error-page4' style='font-size:16px;'><i class='fa fa-times-circle'></i>&nbsp&nbspPlease select your preferred way of integration.</span>"); 
                }
                return false;
            }
            
            return true;
        }
        
        function attachCurrencyInput() {
            var prefix = '$' 
            $('.currencyInput').each(function() {
                $this = $(this)
                $this.focus(function() {
                    $this = $(this)
                    var currentVal = $this.val();
                    if (currentVal == null || currentVal === '') {
                        $this.val(prefix)    
                    }
                })
                $this.focusout(function() {
                    $this = $(this)
                    var currentVal = $this.val();
                    if (currentVal === prefix ) {
                        $this.val('')
                    }
                })
            })
        }
        
        function attachUrlInput() {
            var prefix = 'http://' 
            var httpsPrefix = 'https://'
            $('.urlInput').each(function() {
                $this = $(this)
                $this.focus(function() {
                    $this = $(this)
                    var currentVal = $this.val();
                    if (currentVal == null || currentVal === '') {
                        $this.val(prefix)    
                    }
                })
                $this.focusout(function() {
                    $this = $(this)
                    var currentVal = $this.val();
                    if (currentVal === prefix || currentVal === httpsPrefix) {
                        $this.val('')
                    }
                })
            })
        }
        
        function attachZipInput() {
            $(".zipInput").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and -
                console.log(e.keyCode)
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 189, 173 ]) !== -1 ||
                     // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                     // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                     // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                     // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                     // let it happen, don't do anything
                     return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        }
        
        function reLabelNoneOption() {
            var replacement = '- Please Select -';
            $('option[value=""]').each(function() {
                $this = $(this)
                if ($this.val() === '' && $this.text() !== replacement) {
                    $this.text(replacement)
                }
            })
        }
        
        // across all pages: update visibility
        $( document ).ready(function() {
            refreshMarketplaceExpTable()
            // hide initially
            $("#experience-table-div").hide()
            $(".integration-choices").hide()
            updateFulfillmentVisiblity()
            
            var isOn = $(".categoriesCheckField input[id='checkbox-{!qCon.otherCategoryId}']").is(':checked')
            var specificCategory = $(".specific-category").prop("disabled", !isOn)
            
            for (i = 2; i <= 5; i++) {
                $("tr[title=fulfillment-"+i+"]").hide()
            }
            
            // Show the success dialog box if application is completed
            if ({!qCon.isApplicationCompleted}) {
                showSuccessPanel();
            }
            if ({!qCon.isApplicationBlocked}) {
                showBlockedPanel();
            }
            attachCurrencyInput();
            attachUrlInput();
            attachZipInput();
            reLabelNoneOption();
        });
        
        
    </script>

</apex:component>